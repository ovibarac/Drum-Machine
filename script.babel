
//Redux:
const defaultState={
  text: 'sound'
}

const CHANGE='CHANGE'

const doChange=(newText)=>{
  return{ 
    type: CHANGE,
    text: newText
  }
}

const reducer = (state=defaultState, action)=>{
  switch(action.type){
    case CHANGE:
      return{
        text: action.text
      }
    default: 
      return state;
  }
}

const store=Redux.createStore(reducer);

//React:

const soundArr = [
  {
    keyCode: 81,
    keyTrigger: 'Q',
    id: 'Heater-1',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'
  },
  {
    keyCode: 87,
    keyTrigger: 'W',
    id: 'Heater-2',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'
  },
  {
    keyCode: 69,
    keyTrigger: 'E',
    id: 'Heater-3',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'
  },
  {
    keyCode: 65,
    keyTrigger: 'A',
    id: 'Heater-4',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'
  },
  {
    keyCode: 83,
    keyTrigger: 'S',
    id: 'Clap',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'
  },
  {
    keyCode: 68,
    keyTrigger: 'D',
    id: 'Open-HH',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'
  },
  {
    keyCode: 90,
    keyTrigger: 'Z',
    id: "Kick-n'-Hat",
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'
  },
  {
    keyCode: 88,
    keyTrigger: 'X',
    id: 'Kick',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'
  },
  {
    keyCode: 67,
    keyTrigger: 'C',
    id: 'Closed-HH',
    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'
  }
];


const activeStyle = {
  backgroundColor: '#018786',
  boxShadow: '0 3px #018786',
  height: 77,
  marginTop: 13
};

const inactiveStyle = {
  backgroundColor: '#181818',
  marginTop: 10,
  boxShadow: '3px 3px 5px black'
};

class DrumPad extends React.Component{
  constructor(props){
    super(props);
    
    this.state={
      style: inactiveStyle
    }
    
    this.handleKeyPress = this.handleKeyPress.bind(this);
    this.playSound = this.playSound.bind(this);
  }
  
  componentDidMount(){
    document.addEventListener('keydown', this.handleKeyPress);
  }
  
  componentWillUnmount(){
    document.removeEventListener('keydown', this.handleKeyPress);  
  }
  
  handleKeyPress(e){
    if(e.keyCode == this.props.keyCode){
      this.playSound();
    }
  }
  
  playSound(){
    const sound = document.getElementById(this.props.keyTrigger);
    sound.currentTime=0;
    sound.play();
    this.props.onChange(this.props.clipId)
    this.setState({
      style: activeStyle
    });
    //wait to set the style back
    setTimeout(()=> {this.setState({style: inactiveStyle});}, 100);
  }
  
  render(){
    return(
      <div 
        className="drum-pad"
        id={this.props.clipId}
        onClick={this.playSound}
        style={this.state.style}
        >
        <audio
          className="clip"
          id={this.props.keyTrigger}
          src={this.props.clip}
        />
        {this.props.keyTrigger}
      </div>
    )
  }
  
}

class DrumApp extends React.Component{
  constructor(props){
    super(props);
  }
  
  componentDidMount(){
    // $("#drum-machine").addClass("col-md-4 col-sm-4 container-fluid col-xs-11");
    $("#pads").addClass("col-md-6 col-sm-6 container-fluid");
    $("#display").addClass("col-md-6 col-sm-6 container-fluid");
  }
  
  render(){
    return(
      <div className="h-100 d-flex align-items-center justify-content-center">
      <div id="drum-machine" className="h-100 d-flex align-items-center justify-content-center">
        <div id="pads">
          <div className="row">
            <div className="col-md-4">
              <DrumPad
                clip={soundArr[0].url}
                clipId={soundArr[0].id}
                keyCode={soundArr[0].keyCode}
                keyTrigger={soundArr[0].keyTrigger}
                onChange={this.props.handleTextChange}
              />
            </div>
            <div className="col-md-4">
              <DrumPad
                clip={soundArr[1].url}
                clipId={soundArr[1].id}
                keyCode={soundArr[1].keyCode}
                keyTrigger={soundArr[1].keyTrigger}
                onChange={this.props.handleTextChange}

              />
            </div>
            <div className="col-md-4">
              <DrumPad
                clip={soundArr[2].url}
                clipId={soundArr[2].id}
                keyCode={soundArr[2].keyCode}
                keyTrigger={soundArr[2].keyTrigger}
                onChange={this.props.handleTextChange}
              />
            </div>
          </div>
          <div className="row">
            <div className="col-md-4">
              <DrumPad
                clip={soundArr[3].url}
                clipId={soundArr[3].id}
                keyCode={soundArr[3].keyCode}
                keyTrigger={soundArr[3].keyTrigger}
                onChange={this.props.handleTextChange}
              />
            </div>
            <div className="col-md-4">
              <DrumPad
                clip={soundArr[4].url}
                clipId={soundArr[4].id}
                keyCode={soundArr[4].keyCode}
                keyTrigger={soundArr[4].keyTrigger}
                onChange={this.props.handleTextChange}
              />
            </div>
            <div className="col-md-4">
              <DrumPad
                clip={soundArr[5].url}
                clipId={soundArr[5].id}
                keyCode={soundArr[5].keyCode}
                keyTrigger={soundArr[5].keyTrigger}
                onChange={this.props.handleTextChange}
              />
            </div>
          </div>
          <div className="row">
            <div className="col-md-4">
              <DrumPad
                clip={soundArr[6].url}
                clipId={soundArr[6].id}
                keyCode={soundArr[6].keyCode}
                keyTrigger={soundArr[6].keyTrigger}
                onChange={this.props.handleTextChange}
              />
            </div>
            <div className="col-md-4">
              <DrumPad
                clip={soundArr[7].url}
                clipId={soundArr[7].id}
                keyCode={soundArr[7].keyCode}
                keyTrigger={soundArr[7].keyTrigger}
                onChange={this.props.handleTextChange}
              />
            </div>
            <div className="col-md-4">
              <DrumPad
                clip={soundArr[8].url}
                clipId={soundArr[8].id}
                keyCode={soundArr[8].keyCode}
                keyTrigger={soundArr[8].keyTrigger}
                onChange={this.props.handleTextChange}
              />
            </div>
          </div>
        </div>
        <div id="text-box">
          <div>
            <p id="display">{this.props.displayText}</p>
          </div>
        </div>
      </div>
      </div>
    )
  }
}

//React-Redux
const Provider = ReactRedux.Provider;
const connect = ReactRedux.connect;

const mapStateToProps=(state)=>{
  return {
    displayText: state.text
  }
}

const mapDispatchToProps=(dispatch)=>{
  return{
    handleTextChange: (newText)=>{dispatch(doChange(newText))}
  }
}

const RRContainer = connect(mapStateToProps, mapDispatchToProps)(DrumApp)

class AppWrapper extends React.Component{
  render(){
      return(
        <Provider store={store}>
          <RRContainer/>
        </Provider>
      )
  }

}

ReactDOM.render(<AppWrapper/>, document.getElementById("app"));